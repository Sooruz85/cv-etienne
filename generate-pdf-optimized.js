const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');
const sharp = require('sharp');

console.log('üöÄ D√©marrage du script de g√©n√©ration PDF optimis√©...');

(async () => {
  try {
    // 1. V√©rification des chemins de fichiers
    console.log('üìÅ V√©rification des chemins de fichiers...');
    const filePath = path.resolve(__dirname, 'index.html');
    const outputPath = path.resolve(__dirname, 'CV_Etienne_Gaumery.pdf');
    
    console.log(`üìç Chemin du fichier HTML : ${filePath}`);
    console.log(`üìç Chemin de sortie PDF : ${outputPath}`);

    // 2. V√©rification de l'existence du fichier HTML
    console.log('üîç V√©rification de l\'existence du fichier HTML...');
    if (!fs.existsSync(filePath)) {
      console.error("‚ùå ERREUR : Fichier HTML introuvable :", filePath);
      return;
    }
    console.log("‚úÖ Fichier HTML trouv√© !");

    // 3. Lecture du contenu HTML
    console.log('üìñ Lecture du contenu HTML...');
    let htmlContent = fs.readFileSync(filePath, 'utf8');
    console.log(`‚úÖ Contenu HTML lu (${htmlContent.length} caract√®res)`);

    // 4. Lancement de Puppeteer avec options optimis√©es
    console.log('üåê Lancement de Puppeteer...');
    const browser = await puppeteer.launch({
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-accelerated-2d-canvas',
        '--no-first-run',
        '--no-zygote',
        '--disable-gpu',
        '--disable-background-timer-throttling',
        '--disable-backgrounding-occluded-windows',
        '--disable-renderer-backgrounding',
        '--disable-images', // D√©sactiver le chargement d'images pour r√©duire la taille
        '--disable-javascript' // D√©sactiver JS si pas n√©cessaire
      ],
      timeout: 30000
    });
    console.log("‚úÖ Navigateur Puppeteer lanc√© avec succ√®s");

    // 5. Cr√©ation d'une nouvelle page
    const page = await browser.newPage();
    console.log("‚úÖ Nouvelle page cr√©√©e");

    // 6. Configuration de la page
    console.log('‚öôÔ∏è  Configuration de la page...');
    await page.setViewport({ width: 1200, height: 800 });
    await page.setDefaultNavigationTimeout(0);
    await page.setDefaultTimeout(0);
    console.log("‚úÖ Viewport configur√© (1200x800)");

    // 7. Optimisation de la photo (compression)
    console.log('üñºÔ∏è Optimisation de la photo...');
    try {
      const originalPath = path.resolve(__dirname, 'photo-profil.jpeg');
      const fallbackPath = path.resolve(__dirname, 'photo-profil.jpg');
      let chosenPath = null;
      
      if (fs.existsSync(originalPath)) {
        chosenPath = originalPath;
      } else if (fs.existsSync(fallbackPath)) {
        chosenPath = fallbackPath;
      }
      
      if (chosenPath) {
            // Compression de l'image avec Sharp - qualit√© optimale
            const imgBuffer = fs.readFileSync(chosenPath);
            const compressedBuffer = await sharp(imgBuffer)
              .resize(300, 300, { 
                fit: 'cover',
                position: 'top' // Commencer par le haut pour capturer la t√™te compl√®te
              }) 
              .jpeg({ quality: 85 }) // Qualit√© JPEG √† 85% pour bonne qualit√©
              .toBuffer();
        
        const base64 = compressedBuffer.toString('base64');
        const dataUri = `data:image/jpeg;base64,${base64}`;
        htmlContent = htmlContent.replace(/src=["']photo-profil\.jpg["']/g, `src="${dataUri}"`);
        console.log(`‚úÖ Photo compress√©e et embarqu√©e (${Math.round(compressedBuffer.length / 1024)} KB)`);
      } else {
        console.warn('‚ö†Ô∏è  Aucune photo trouv√©e');
      }
    } catch (e) {
      console.warn('‚ö†Ô∏è  Impossible d\'optimiser la photo:', e.message);
    }

    // 8. Chargement du contenu HTML
    console.log('üåê Chargement du contenu HTML en m√©moire...');
    await page.setContent(htmlContent, { waitUntil: 'load' });
    console.log("‚úÖ Contenu HTML charg√©");

    // 9. Attendre le chargement complet
    console.log('‚è≥ Attente du chargement complet...');
    await new Promise(resolve => setTimeout(resolve, 1000));

    // 10. G√©n√©ration du PDF avec options de compression
    console.log('üìÑ G√©n√©ration du PDF optimis√©...');
    try {
      await page.pdf({
        path: outputPath,
        format: 'A4',
        printBackground: true,
        margin: {
          top: '10mm',
          right: '10mm',
          bottom: '10mm',
          left: '10mm'
        },
        // Options d'optimisation
        preferCSSPageSize: true,
        displayHeaderFooter: false
      });
      console.log("‚úÖ PDF g√©n√©r√© avec succ√®s !");
    } catch (pdfError) {
      console.error("‚ùå ERREUR lors de la g√©n√©ration du PDF :", pdfError.message);
      throw pdfError;
    }

    // 11. V√©rification du fichier PDF g√©n√©r√©
    console.log('üîç V√©rification du fichier PDF g√©n√©r√©...');
    if (fs.existsSync(outputPath)) {
      const stats = fs.statSync(outputPath);
      const sizeKB = (stats.size / 1024).toFixed(2);
      const sizeMB = (stats.size / (1024 * 1024)).toFixed(2);
      
      console.log(`‚úÖ Fichier PDF cr√©√© : ${outputPath}`);
      console.log(`üìä Taille du fichier : ${sizeKB} KB (${sizeMB} MB)`);
      
      if (stats.size < 1024 * 1024) { // Moins de 1 MB
        console.log("üéâ Excellent ! Le fichier fait moins de 1 MB");
      } else if (stats.size < 1.5 * 1024 * 1024) { // Moins de 1.5 MB
        console.log("‚úÖ Bon ! Le fichier fait moins de 1.5 MB");
      } else {
        console.log("‚ö†Ô∏è  Le fichier fait plus de 1.5 MB, mais c'est acceptable pour un CV de qualit√©");
      }
    } else {
      console.error("‚ùå ERREUR : Le fichier PDF n'a pas √©t√© cr√©√©");
    }

    // 12. Fermeture du navigateur
    console.log('üîí Fermeture du navigateur...');
    await browser.close();
    console.log("‚úÖ Navigateur ferm√©");

    console.log('üéâ Script termin√© avec succ√®s !');
    console.log(`üìÑ Votre PDF optimis√© est disponible ici : ${outputPath}`);

  } catch (error) {
    console.error('üí• ERREUR FATALE :', error.message);
    console.error('üìã D√©tails de l\'erreur :', error.stack);
    
    try {
      if (typeof browser !== 'undefined') {
        await browser.close();
        console.log("‚úÖ Navigateur ferm√© apr√®s erreur");
      }
    } catch (closeError) {
      console.error("‚ùå Erreur lors de la fermeture du navigateur :", closeError.message);
    }
    
    process.exit(1);
  }
})();
